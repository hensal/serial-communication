It transfer data in once the debugg in done(one click)
systeminit.c:
/***********************************************************************************************************************
* DISCLAIMER
* This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
* No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
* applicable laws, including copyright laws. 
* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
* OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
* LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
* INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
* ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
* Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
* of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
* following link:
* http://www.renesas.com/disclaimer
*
* Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
***********************************************************************************************************************/

/***********************************************************************************************************************
* File Name    : r_systeminit.c
* Version      : CodeGenerator for RL78/G14 V2.04.02.01 [15 May 2015]
* Device(s)    : R5F104PJ
* Tool-Chain   : CCRL
* Description  : This file implements system initializing function.
* Creation Date: 2016/04/08
***********************************************************************************************************************/
#include "sfr.h"
#include "common.h"
#include "config.h"
#include "system.h"
#include "int.h"
#include "port.h"
#include "timer.h"
#include "watchdogtimer.h"
/***********************************************************************************************************************
Includes
***********************************************************************************************************************/
#include "r_cg_macrodriver.h"
#include "r_cg_cgc.h"
#include "r_cg_port.h"
#include "r_cg_serial.h"
/* Start user code for include. Do not edit comment generated here */
/* End user code. Do not edit comment generated here */
#include "r_cg_userdefine.h"

/***********************************************************************************************************************
Pragma directive
***********************************************************************************************************************/
/* Start user code for pragma. Do not edit comment generated here */
/* End user code. Do not edit comment generated here */
void R_Systeminit(void);
void PORT_Init(void);
void SystemInit( void )
{
	/* Clock generator initiate */
	Clock_Init();
	
	/* Port initiate */
	PORT_Init();
	
	/* WDT initiate */
	WDT_Init();
	
	/* INT initiate */
	INT_Init();
	
#if !defined PWM_USED
	/* TM00 initiate */
	TM00_Init();
#endif /* end of defined PWM_USED */
}

/*******************************************************************************
* Function Name: hdwinit
* Description  : This function initializes hardware settings.
* Arguments    : none
* Return Value : none
********************************************************************************/
void hdwinit( void )
{
	__DI( );
	SystemInit( );
	R_Systeminit();
	__EI( );
}

/* Start user code for global. Do not edit comment generated here */
/* End user code. Do not edit comment generated here */

/***********************************************************************************************************************
* Function Name: R_Systeminit
* Description  : This function initializes every macro.
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void R_Systeminit(void)
{
    PIOR0 = 0x00U;
    PIOR1 = 0x00U;
    R_CGC_Create();
    R_PORT_Create();
    R_SAU0_Create();
    IAWCTL = 0x00U;
}

/***********************************************************************************************************************
* Function Name: hdwinit
* Description  : This function initializes hardware setting.
* Arguments    : None
* Return Value : None


/* Start user code for adding. Do not edit comment generated here */
/* End user code. Do not edit comment generated here */

[OR]
main.c:
#include "sfr.h"
#include "common.h"
#include "config.h"
#include "system.h"
#include "timer.h"
#include "watchdogtimer.h"
#include "panel.h"
#include "lcd_con.h"
#include "button.h"
#include <stdint.h>
#include <stdbool.h>
#include "r_cg_macrodriver.h"
#include "r_cg_cgc.h"
#include "r_cg_port.h"
#include "r_cg_serial.h"
#include "r_cg_userdefine.h"

void IO_Init(void);	
void op_switich_in(void);		
void op_switich_mdoef(void);
void op_switich_modef(void);
void op_switich_upf(void);
void op_switich_downf(void);
int op_switich_leftf(void);
void op_switich_rightf(void);
void op_switich_setf(void);
void op_switich_setff(void);
int display1(void);
void R_Systeminit(void);
//int write_string(uint_fast8_t row, uint_fast8_t col, unsigned const char  *str);
void op_switich_upf1(void);

unsigned char 	modef 	= 0;		
unsigned char 	upf 	= 0;
unsigned char 	downf 	= 0;
unsigned char 	leftf 	= 0;
unsigned char 	rightf 	= 0;
unsigned char 	setf 	= 0;

unsigned char dpcnt[4];

uint8_t g_uart0_rx_buffer = 0U;                     /* UART0 receive buffer */
uint8_t g_uart0_rx_error = 0U;                      /* UART0 receive error status */
MD_STATUS g_uart0_tx_end = 0U;                      /* UART0 transmission end */  

static const uint8_t g_messageOK[4] = {"OK\r\n"};   /* Message for "T" */
static const uint8_t g_messageok[4] = {"ok\r\n"};   /* Message for "t" */
static const uint8_t g_messageUC[4] = {"UC\r\n"};   /* Message for other */
static const uint8_t g_messageFE[4] = {"FE\r\n"};   /* Framing error message */
static const uint8_t g_messagePE[4] = {"PE\r\n"};   /* Parity error message */
static const uint8_t g_messageOE[4] = {"OE\r\n"};   /* Overrun error message */
/* End user code. Do not edit comment generated here */
void R_MAIN_UserInit(void);

//************************************************************************
//* Function Name: main
//* Description  : This function implements main function.?i???C?g?O?h?j
//* Arguments    : None
//* Return Value : None
//*************************************************************************
void main(void);
void main_loop(void);

void main(void) {
     /* Hardware Initiate */ 
  
        hdwinit(); 	
	 
	/* Panel Initiate */
	panel_init0();	
	
	/*LCD Initiate */
	lcd_init();
	
	/*LCD TITLE set */
	//dispset_titl();
	
	display1();	
	
	/* Main Loop */
	main_loop();		
	
    	lcd_init();	
	}

void main_loop(void)
{
    R_MAIN_UserInit();
    /* Start user code. Do not edit comment generated here */
    {
        volatile MD_STATUS    status = 0U;        /* UART Status */

        /* UART0 receive buffer setting */
        status = R_UART0_Receive(&g_uart0_rx_buffer, 1U);

        /* Start the UART0 Tx/Rx operation */
        R_UART0_Start();

        /* Main loop */
        while (1U)
        {
            HALT();    /* Wait for UART Rx interrupt */

            /* Finish Reception and check result */

            SRMK1 = 1U;            /* Disable Reception Interrupt */
            SREMK1 = 1U;           /* Disable Reception error Interrupt */

            if (g_uart0_rx_error)    /* Check reception error */
            {    /* Reception error */
                if (g_uart0_rx_error & 0x04U)           /* Framing error */
                {    /* Transmit "Framing error" */
                    g_uart0_tx_end = R_UART0_Send((uint8_t *)g_messageFE, 4U);
                    while (0U == g_uart0_tx_end)
                    {
                        NOP();    /* Wait for final transmit */
                    }
                }
                else
                {
                    ;
                }

                if (g_uart0_rx_error & 0x02U)           /* Parity error */
                {    /* Transmit "Parity error" */
                    g_uart0_tx_end = R_UART0_Send((uint8_t *)g_messagePE, 4U);
                    while (0U == g_uart0_tx_end)
                    {
                        NOP();    /* Wait for final transmit */
                    }
                }
                else
                {
                    ;
                }

                if (g_uart0_rx_error & 0x01U)           /* Overrun error */
                {    /* Transmit "Overrun error" */
                    g_uart0_tx_end = R_UART0_Send((uint8_t *)g_messageOE, 4U);
                    while (0U == g_uart0_tx_end)
                    {
                        NOP();    /* Wait for final transmit */
                    }
                }
                else
                {
                    ;
                }

            }
            else        /* Normal reception */
            {
                switch (g_uart0_rx_buffer)    /* Check Reception data */
                {
                    case 'T':    /* Reception data is 'T' */
                        g_uart0_tx_end = R_UART0_Send((uint8_t *)g_messageOK, 4U);    /* Transmit "OK" */
                        break;

                    case 't':    /* Reception data is 't' */
                        g_uart0_tx_end = R_UART0_Send((uint8_t *)g_messageok, 4U);    /* Transmit "ok" */
                        break;

                    default:        /* Received another character */
                        g_uart0_tx_end = R_UART0_Send((uint8_t *)g_messageUC, 4U);    /* Transmit "UC" */
                        break;
                }
                while (0U == g_uart0_tx_end)
                {
                    NOP();    /* Wait for final transmit */
                }
            }

            /* For next reception */

            /* Set reception buffer pointer */
            status = R_UART0_Receive(&g_uart0_rx_buffer, 1U);

            SRMK1 = 0U;                        /* Enable Reception Interrupt */
            SREMK1 = 0U;                       /* Enable Reception error Interrupt */
        }
    }
    /* End user code. Do not edit comment generated here */
}

/***********************************************************************************************************************
* Function Name: R_MAIN_UserInit
* Description  : This function adds user code before implementing main function.
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void R_MAIN_UserInit(void)          //This must be included here for serial communication 
{
    /* Start user code. Do not edit comment generated here */
    EI();
    /* End user code. Do not edit comment generated here */
}

/* Start user code for adding. Do not edit comment generated here */
/* End user code. Do not edit comment generated here */

systeminit.c
/*******************************************************************************
* DISCLAIMER
* This software is supplied by Renesas Electronics Corporation and is only
* intended for use with Renesas products. No other uses are authorized. This
* software is owned by Renesas Electronics Corporation and is protected under
* all applicable laws, including copyright laws.
* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
* THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT
* LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
* AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.
* TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
* ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
* FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR
* ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE
* BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
* Renesas reserves the right, without notice, to make changes to this software
* and to discontinue the availability of this software. By using this software,
* you agree to the additional terms and conditions found by accessing the
* following link:
* http://www.renesas.com/disclaimer
*
* Copyright (C) 2016 Renesas Electronics Corporation. All rights reserved.
*******************************************************************************/

/*******************************************************************************
* File Name    : systeminit.c
* Version      : Applilet EZ PL for RL78
* Device(s)    : R5F1056A,R5F1057A,R5F1058A
* Tool-Chain   : CC-RL
* Description  : This file implements main function.
* Creation Date: 2016/09/14
*******************************************************************************/

/*******************************************************************************
Includes <System Includes> , "Project Includes"
*******************************************************************************/
#include "sfr.h"
#include "common.h"
#include "config.h"
#include "system.h"
#include "int.h"
#include "port.h"
#include "timer.h"
#include "watchdogtimer.h"

#include "r_cg_macrodriver.h"
#include "r_cg_cgc.h"
#include "r_cg_port.h"
#include "r_cg_serial.h"
#include "r_cg_userdefine.h"

/*******************************************************************************
Macro definitions
*******************************************************************************/

/*******************************************************************************
Typedef definitions
*******************************************************************************/

/*******************************************************************************
Imported global variables and functions (from other files)
*******************************************************************************/

/*******************************************************************************
Exported global variables and functions (to be accessed by other files)
*******************************************************************************/

/*******************************************************************************
Private variables and functions
*******************************************************************************/

/*******************************************************************************
* Function Name: SystemInit
* Description  : This function initializes every Macro.
* Arguments    : none
* Return Value : none
********************************************************************************/
void PORT_Init(void);

void R_Systeminit(void);
void SystemInit( void )
{
	/* Clock generator initiate */
	Clock_Init();
	
	/* Port initiate */
	PORT_Init();
	
	/* WDT initiate */
	WDT_Init();
	
	/* INT initiate */
	INT_Init();
	
#if !defined PWM_USED
	/* TM00 initiate */
	TM00_Init();
#endif /* end of defined PWM_USED */
}

/*******************************************************************************
* Function Name: hdwinit
* Description  : This function initializes hardware settings.
* Arguments    : none
* Return Value : none
********************************************************************************/
void hdwinit( void )
{
	__DI( );
	SystemInit();
	 R_Systeminit();	 

}

void R_Systeminit(void)
{
    PIOR0 = 0x00U;
    PIOR1 = 0x00U;
    R_CGC_Create();
    R_PORT_Create();
    R_SAU0_Create();
    IAWCTL = 0x00U;
}
